= simple_eav

simple_eav provides a more simple alternative to {acts_as_eav_model}[https://github.com/visfleet/acts_as_eav_model] that works with 
ActiveRecord without any monkey patching.  This gem is designed to be a replacement for acts_as_eav_model.

Acts_as_eav_model's purpose is to provide a model with any number of custom attributes.  This project has the same purpose.  The difference being maintaining utmost
compatibility with ActiveRecord::Base.  For this reason, there is one glaring inconsistency between this gem and acts_as_eav_model.
Acts_as_eav_model overrides attributes (among other functionality) to allow you to set any custom attributes. Simple eav does not.  I ommitted this in the interest
of not having to monkey patch ActiveRecord.

=== Example
  person = Person.new {:custom_attribute=>'value'} #This does not work in simple_eav

  person = Person.new {:simple_eav_attributes => {:custom_attribute=>'value'} #This does work in simple_eav
  person.custom_attribute ~> 'value'

The latter works because all simple_eav does is use ActiveRecord's built in serialize mechanism to store a hash of custom attributes.
So in this example, simple_eav_attributes is a text column in the database for the persons table.  Simple eav then takes of
serializing the data for this column and defines setters/getters for your custom values.

This is the only known inconsistency between these two gems. If this is an issue in your project please let me know.

== Installation
  gem install simple_eav

== Usage
=== 1. Create the migration for your model

  create_table :people do |t|
    t.text  :custom_attributes # Name this column whatever you like just *make sure* it is a TEXT field
    ....
  end

=== 2. Configure simple_eav in your model

  class Person < ActiveRecord::Base
    include SimpleEav

    configure_simple_eav :custom_attributes # This sets up the serialization for your custom attributes
  end

=== 3. Set and Get custom attributes as if they were a normal attribute on your model
  person = Person.new
  person.name = 'Joe'
  person.name ~> 'Joe'

== Migrating to simple_eav
I have not done this yet but will hopefully be making the transition soon.  I'll update the README once that's complete or let me know what you find if you migrate your project first.
At the moment, a migration would be needed that:
 - Moves each attribute record to a key => value pair for the simple_eav_column on the model using acts_as_eav_model
 - Destroys each attribute record

You'd also need to review where your models using acts_as_eav_model are initialized.  If they depended on the single incompatibility mentioned above those calls will need to be updated.

== Contributing

* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a
  commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.


== Author

{Tim Linquist}[http://github.com/timo3377]

== Copyright

Copyright (c) 2011 {Tim Linquist}[http://github.com/timo3377]

See link:LICENSE for details.
